version: '3.8'

services:
  # Use existing PostgreSQL container
  postgres-db:
    image: postgres:15.4
    container_name: medical-records-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: historias_clinicas
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
      # Use your existing password
    ports:
      - "5432:5432"  # Expose for local development
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - medical-records-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  python-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: medical-records-backend
    restart: unless-stopped
    ports:
      - "8000:8000"  # FastAPI server
    environment:
      # Database connection using container name
      DATABASE_URL: postgresql://postgres:mysecretpassword@medical-records-db:5432/historias_clinicas
      # Alternative connection for existing container
      DB_HOST: medical-records-db
      DB_PORT: 5432
      DB_NAME: historias_clinicas
      DB_USER: postgres
      DB_PASSWORD: mysecretpassword
      # Backend configuration
      PYTHONPATH: /app
      PYTHONUNBUFFERED: 1
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - medical-records-network
    volumes:
      - ./backend:/app
      - /app/__pycache__

  typescript-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: medical-records-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"  # React development server
    environment:
      # Point to backend container
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_BACKEND_URL: http://medical-records-backend:8000
      CHOKIDAR_USEPOLLING: true  # For file watching in Docker
    depends_on:
      - python-backend
    networks:
      - medical-records-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm start

networks:
  medical-records-network:
    driver: bridge
    name: medical-records-network

volumes:
  postgres_data:
    name: medical-records-postgres-data
