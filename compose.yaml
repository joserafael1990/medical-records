services:
  python-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    init: true
    ports:
      - "8000:8000"  # FastAPI default port
    networks:
      - appnet
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - MEDICAL_ENCRYPTION_KEY=17TAemFFyvzzOSCNdm9fISoQjiWzlWAgVJslIOYaGpU=
      - WHATSAPP_PROVIDER=twilio
      # Twilio credentials - MUST be set via environment variables or .env file
      # DO NOT hardcode credentials in this file
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_WHATSAPP_FROM=${TWILIO_WHATSAPP_FROM}
      # Content SIDs de templates aprobados en Twilio (opcional)
      - TWILIO_CONTENT_SID_APPOINTMENT_REMINDER=${TWILIO_CONTENT_SID_APPOINTMENT_REMINDER:-}
      - TWILIO_CONTENT_SID_PRIVACY_NOTICE=${TWILIO_CONTENT_SID_PRIVACY_NOTICE:-}

      
    # env_file: ./backend/.env  # Uncomment if .env file exists
    volumes:
      # Mount backend source code for hot reload (exclude venv)
      - ./backend:/app
      - /app/__pycache__  # Exclude Python cache
      - backend_venv:/app/.venv  # Use named volume for virtual environment
    depends_on:
      - postgres-db  # Ensure DB is up before backend starts

  typescript-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev  # Use development Dockerfile
    restart: unless-stopped
    init: true
    ports:
      - "3000:3000"  # React app default port
    networks:
      - appnet
    environment:
      - NODE_OPTIONS=--max-old-space-size=8192  # 8GB memory limit
      - GENERATE_SOURCEMAP=false
      - TSC_COMPILE_ON_ERROR=true
      - ESLINT_NO_DEV_ERRORS=true
      - SKIP_PREFLIGHT_CHECK=true
      - DISABLE_ESLINT_PLUGIN=true
      - FAST_REFRESH=true  # Enable hot reload
      - CI=false  # Disable CI mode for development
    # env_file: ./frontend/.env  # Uncomment if .env file exists
    volumes:
      # Mount frontend source code for hot reload
      - ./frontend:/app
      - /app/node_modules  # Exclude node_modules (use container's version)
      - /app/build  # Exclude build directory
      - /app/dist  # Exclude dist directory
    depends_on:
      - python-backend  # Frontend expects backend to be up
    deploy:
      resources:
        limits:
          memory: 10G  # Limit container memory to 10GB

  postgres-db:
    image: postgres:latest
    restart: unless-stopped
    networks:
      - appnet
    environment:
      POSTGRES_USER: historias_user
      POSTGRES_PASSWORD: historias_pass
      POSTGRES_DB: historias_clinicas
    ports:
      - "5432:5432"  # Expose for local dev
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U historias_user -d historias_clinicas"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  appnet:
    driver: bridge

volumes:
  postgres_data:
    # Persistent storage for PostgreSQL
  backend_venv:
    # Virtual environment for backend (to avoid conflicts with volume mounts)
