#!/usr/bin/env python3
"""
Insert comprehensive laboratory studies catalog directly
"""

import os
import sys
sys.path.append('/app')

from database import engine, StudyCategory, StudyCatalog, StudyNormalValue, StudyTemplate, StudyTemplateItem
from sqlalchemy.orm import sessionmaker

def insert_comprehensive_studies():
    """Insert comprehensive laboratory studies catalog"""
    
    print("üöÄ Starting comprehensive laboratory studies catalog insertion...")
    
    Session = sessionmaker(bind=engine)
    session = Session()
    
    try:
        # Clear existing data
        print("üßπ Clearing existing data...")
        session.query(StudyTemplateItem).delete()
        session.query(StudyTemplate).delete()
        session.query(StudyNormalValue).delete()
        session.query(StudyCatalog).delete()
        session.query(StudyCategory).delete()
        session.commit()
        print("‚úÖ Existing data cleared")
        
        # Insert categories
        print("üìù Inserting study categories...")
        categories_data = [
            ('LAB', 'Laboratorio Cl√≠nico', 'Estudios de laboratorio cl√≠nico general'),
            ('HEM', 'Hematolog√≠a', 'Estudios de c√©lulas sangu√≠neas y coagulaci√≥n'),
            ('BIO', 'Bioqu√≠mica', 'Estudios de qu√≠mica sangu√≠nea y metabolitos'),
            ('MIC', 'Microbiolog√≠a', 'Estudios microbiol√≥gicos y cultivos'),
            ('INM', 'Inmunolog√≠a', 'Estudios inmunol√≥gicos y serolog√≠a'),
            ('URO', 'Uroan√°lisis', 'Estudios de orina y funci√≥n renal'),
            ('END', 'Endocrinolog√≠a', 'Estudios hormonales y endocrinos'),
            ('GEN', 'Gen√©tica', 'Estudios gen√©ticos y moleculares'),
            ('IMG', 'Imagenolog√≠a', 'Estudios de imagen m√©dica'),
            ('FUN', 'Funcionales', 'Estudios de funci√≥n org√°nica'),
            ('BIP', 'Biopsias', 'Estudios histopatol√≥gicos'),
            ('TOX', 'Toxicolog√≠a', 'Estudios toxicol√≥gicos y drogas'),
            ('CAR', 'Cardiolog√≠a', 'Estudios cardiol√≥gicos espec√≠ficos'),
            ('NEU', 'Neurolog√≠a', 'Estudios neurol√≥gicos'),
            ('DER', 'Dermatolog√≠a', 'Estudios dermatol√≥gicos'),
            ('GIN', 'Ginecolog√≠a', 'Estudios ginecol√≥gicos y obst√©tricos'),
            ('PED', 'Pediatr√≠a', 'Estudios pedi√°tricos espec√≠ficos'),
            ('GER', 'Geriatr√≠a', 'Estudios geri√°tricos espec√≠ficos')
        ]
        
        categories = {}
        for code, name, description in categories_data:
            category = StudyCategory(code=code, name=name, description=description)
            session.add(category)
            session.flush()  # Get the ID
            categories[code] = category.id
        
        session.commit()
        print(f"‚úÖ Inserted {len(categories)} categories")
        
        # Insert studies
        print("üìù Inserting studies...")
        studies_data = [
            # Hematology
            ('HEM001', 'Biometr√≠a Hem√°tica Completa', 'HEM', 'Hematolog√≠a B√°sica', 'Conteo completo de c√©lulas sangu√≠neas incluyendo eritrocitos, leucocitos, plaquetas, hemoglobina y hematocrito', 'No requiere ayuno', 'Citometr√≠a de flujo', 2, 'Medicina General'),
            ('HEM002', 'Biometr√≠a Hem√°tica con Plaquetas', 'HEM', 'Hematolog√≠a B√°sica', 'Conteo de c√©lulas sangu√≠neas con enfoque en plaquetas', 'No requiere ayuno', 'Citometr√≠a de flujo', 2, 'Medicina General'),
            ('HEM003', 'Hemoglobina y Hematocrito', 'HEM', 'Hematolog√≠a B√°sica', 'Determinaci√≥n de hemoglobina y hematocrito', 'No requiere ayuno', 'Espectrofotometr√≠a', 1, 'Medicina General'),
            ('HEM004', 'Conteo de Reticulocitos', 'HEM', 'Hematolog√≠a B√°sica', 'Conteo de reticulocitos para evaluaci√≥n de eritropoyesis', 'No requiere ayuno', 'Microscop√≠a', 4, 'Hematolog√≠a'),
            ('HEM005', 'Velocidad de Sedimentaci√≥n Globular (VSG)', 'HEM', 'Hematolog√≠a B√°sica', 'Velocidad de sedimentaci√≥n de eritrocitos', 'No requiere ayuno', 'Sedimentaci√≥n', 1, 'Medicina General'),
            
            # Biochemistry
            ('BIO001', 'Qu√≠mica Sangu√≠nea de 6 Elementos', 'BIO', 'Qu√≠mica B√°sica', 'Glucosa, urea, creatinina, √°cido √∫rico, colesterol total, triglic√©ridos', 'Ayuno de 12 horas', 'Espectrofotometr√≠a', 4, 'Medicina General'),
            ('BIO002', 'Qu√≠mica Sangu√≠nea de 12 Elementos', 'BIO', 'Qu√≠mica B√°sica', 'Perfil metab√≥lico b√°sico extendido', 'Ayuno de 12 horas', 'Espectrofotometr√≠a', 4, 'Medicina General'),
            ('BIO003', 'Qu√≠mica Sangu√≠nea de 20 Elementos', 'BIO', 'Qu√≠mica B√°sica', 'Perfil metab√≥lico completo', 'Ayuno de 12 horas', 'Espectrofotometr√≠a', 4, 'Medicina General'),
            ('BIO004', 'Glucosa en Ayunas', 'BIO', 'Qu√≠mica B√°sica', 'Determinaci√≥n de glucosa en ayunas', 'Ayuno de 8 horas', 'Glucosa oxidasa', 2, 'Endocrinolog√≠a'),
            ('BIO005', 'Glucosa Postprandial', 'BIO', 'Qu√≠mica B√°sica', 'Glucosa 2 horas postprandial', 'Ayuno de 8 horas, comida controlada', 'Glucosa oxidasa', 2, 'Endocrinolog√≠a'),
            
            # Endocrinology
            ('END001', 'Perfil Tiroideo B√°sico', 'END', 'Funci√≥n Tiroidea', 'TSH, T4L', 'No requiere ayuno', 'Inmunoensayo', 24, 'Endocrinolog√≠a'),
            ('END002', 'Perfil Tiroideo Completo', 'END', 'Funci√≥n Tiroidea', 'TSH, T4L, T3L, T4 total, T3 total', 'No requiere ayuno', 'Inmunoensayo', 24, 'Endocrinolog√≠a'),
            ('END003', 'Hormona Estimulante de Tiroides (TSH)', 'END', 'Funci√≥n Tiroidea', 'TSH ultrasensible', 'No requiere ayuno', 'Inmunoensayo', 24, 'Endocrinolog√≠a'),
            ('END004', 'Tiroxina Libre (T4L)', 'END', 'Funci√≥n Tiroidea', 'T4 libre', 'No requiere ayuno', 'Inmunoensayo', 24, 'Endocrinolog√≠a'),
            ('END005', 'Triyodotironina Libre (T3L)', 'END', 'Funci√≥n Tiroidea', 'T3 libre', 'No requiere ayuno', 'Inmunoensayo', 24, 'Endocrinolog√≠a'),
            
            # Microbiology
            ('MIC001', 'Cultivo de Orina y Antibiograma', 'MIC', 'Cultivos', 'Cultivo bacteriano de orina con sensibilidad', 'Orina de chorro medio', 'Cultivo bacteriano', 72, 'Urolog√≠a'),
            ('MIC002', 'Urocultivo Simple', 'MIC', 'Cultivos', 'Cultivo de orina sin antibiograma', 'Orina de chorro medio', 'Cultivo bacteriano', 48, 'Urolog√≠a'),
            ('MIC003', 'Cultivo de Orina con Conteo', 'MIC', 'Cultivos', 'Cultivo con conteo de colonias', 'Orina de chorro medio', 'Cultivo bacteriano', 48, 'Urolog√≠a'),
            ('MIC004', 'Hemocultivo', 'MIC', 'Cultivos', 'Cultivo de sangre para bacterias', 'No requiere ayuno', 'Cultivo bacteriano', 72, 'Medicina General'),
            ('MIC005', 'Hemocultivo con Antibiograma', 'MIC', 'Cultivos', 'Hemocultivo con sensibilidad', 'No requiere ayuno', 'Cultivo bacteriano', 72, 'Medicina General'),
            
            # Immunology
            ('INM001', 'Factor Reumatoide', 'INM', 'Autoinmunidad', 'Factor reumatoide IgM', 'No requiere ayuno', 'Inmunoensayo', 24, 'Reumatolog√≠a'),
            ('INM002', 'Anticuerpos Antinucleares (ANA)', 'INM', 'Autoinmunidad', 'Anticuerpos antinucleares', 'No requiere ayuno', 'Inmunofluorescencia', 24, 'Reumatolog√≠a'),
            ('INM003', 'Anti-ADN de Doble Cadena', 'INM', 'Autoinmunidad', 'Anti-dsDNA', 'No requiere ayuno', 'Inmunoensayo', 24, 'Reumatolog√≠a'),
            ('INM004', 'Anti-Sm', 'INM', 'Autoinmunidad', 'Anticuerpos anti-Smith', 'No requiere ayuno', 'Inmunoensayo', 24, 'Reumatolog√≠a'),
            ('INM005', 'Anti-RNP', 'INM', 'Autoinmunidad', 'Anticuerpos anti-RNP', 'No requiere ayuno', 'Inmunoensayo', 24, 'Reumatolog√≠a'),
            
            # Urinalysis
            ('URO001', 'Examen General de Orina', 'URO', 'Uroan√°lisis B√°sico', 'An√°lisis f√≠sico, qu√≠mico y microsc√≥pico', 'Primera orina de la ma√±ana', 'Microscop√≠a y tiras reactivas', 2, 'Medicina General'),
            ('URO002', 'Uroan√°lisis Completo', 'URO', 'Uroan√°lisis B√°sico', 'An√°lisis completo con sedimento', 'Primera orina de la ma√±ana', 'Microscop√≠a y tiras reactivas', 2, 'Medicina General'),
            ('URO003', 'Tira Reactiva de Orina', 'URO', 'Uroan√°lisis B√°sico', 'An√°lisis qu√≠mico con tira reactiva', 'Primera orina de la ma√±ana', 'Tiras reactivas', 1, 'Medicina General'),
            ('URO004', 'Sedimento Urinario', 'URO', 'Uroan√°lisis B√°sico', 'Examen microsc√≥pico del sedimento', 'Primera orina de la ma√±ana', 'Microscop√≠a', 2, 'Medicina General'),
            ('URO005', 'Prote√≠nas en Orina 24h', 'URO', 'Uroan√°lisis Especial', 'Prote√≠nas totales en orina 24h', 'Recolecci√≥n 24h', 'Espectrofotometr√≠a', 24, 'Nefrolog√≠a'),
        ]
        
        studies = {}
        for code, name, category_code, subcategory, description, preparation, methodology, duration_hours, specialty in studies_data:
            study = StudyCatalog(
                code=code,
                name=name,
                category_id=categories[category_code],
                subcategory=subcategory,
                description=description,
                preparation=preparation,
                methodology=methodology,
                duration_hours=duration_hours,
                specialty=specialty
            )
            session.add(study)
            session.flush()  # Get the ID
            studies[code] = study.id
        
        session.commit()
        print(f"‚úÖ Inserted {len(studies)} studies")
        
        # Insert normal values
        print("üìù Inserting normal values...")
        normal_values_data = [
            ('HEM001', 18, 99, 'B', 4.5, 5.5, 'millones/ŒºL', 'Eritrocitos'),
            ('HEM001', 18, 99, 'B', 12.0, 16.0, 'g/dL', 'Hemoglobina'),
            ('HEM001', 18, 99, 'B', 36.0, 46.0, '%', 'Hematocrito'),
            ('HEM001', 18, 99, 'B', 4000.0, 10000.0, 'ŒºL', 'Leucocitos'),
            ('HEM001', 18, 99, 'B', 150000.0, 450000.0, 'ŒºL', 'Plaquetas'),
            ('BIO004', 18, 99, 'B', 70.0, 100.0, 'mg/dL', 'Valores normales'),
            ('BIO004', 18, 99, 'B', 100.0, 125.0, 'mg/dL', 'Prediabetes'),
            ('BIO004', 18, 99, 'B', 126.0, 999.0, 'mg/dL', 'Diabetes'),
            ('END003', 18, 99, 'B', 0.4, 4.0, 'mUI/L', 'TSH'),
            ('END004', 18, 99, 'B', 0.8, 1.8, 'ng/dL', 'T4L'),
        ]
        
        for study_code, age_min, age_max, gender, min_value, max_value, unit, notes in normal_values_data:
            if study_code in studies:
                normal_value = StudyNormalValue(
                    study_id=studies[study_code],
                    age_min=age_min,
                    age_max=age_max,
                    gender=gender,
                    min_value=min_value,
                    max_value=max_value,
                    unit=unit,
                    notes=notes
                )
                session.add(normal_value)
        
        session.commit()
        print(f"‚úÖ Inserted {len(normal_values_data)} normal values")
        
        # Insert templates
        print("üìù Inserting study templates...")
        templates_data = [
            ('Chequeo General', 'Estudios b√°sicos para evaluaci√≥n general de salud', 'Medicina General', True),
            ('Monitoreo de Diabetes', 'Estudios para seguimiento de diabetes mellitus', 'Endocrinolog√≠a', True),
            ('Evaluaci√≥n Card√≠aca', 'Estudios para evaluaci√≥n cardiovascular', 'Cardiolog√≠a', True),
            ('Control Prenatal', 'Estudios para seguimiento prenatal', 'Ginecolog√≠a', True),
            ('Evaluaci√≥n Tiroidea', 'Estudios para evaluaci√≥n de la funci√≥n tiroidea', 'Endocrinolog√≠a', False),
        ]
        
        templates = {}
        for name, description, specialty, is_default in templates_data:
            template = StudyTemplate(
                name=name,
                description=description,
                specialty=specialty,
                is_default=is_default
            )
            session.add(template)
            session.flush()  # Get the ID
            templates[name] = template.id
        
        session.commit()
        print(f"‚úÖ Inserted {len(templates)} templates")
        
        # Insert template items
        print("üìù Inserting template items...")
        template_items_data = [
            ('Chequeo General', ['HEM001', 'BIO001', 'URO001']),
            ('Monitoreo de Diabetes', ['BIO004', 'BIO001', 'URO001']),
            ('Evaluaci√≥n Card√≠aca', ['BIO001', 'HEM001']),
            ('Control Prenatal', ['HEM001', 'BIO001', 'URO001']),
            ('Evaluaci√≥n Tiroidea', ['END001', 'END003', 'END004']),
        ]
        
        for template_name, study_codes in template_items_data:
            for i, study_code in enumerate(study_codes):
                if study_code in studies and template_name in templates:
                    template_item = StudyTemplateItem(
                        template_id=templates[template_name],
                        study_id=studies[study_code],
                        order_index=i
                    )
                    session.add(template_item)
        
        session.commit()
        print("‚úÖ Inserted template items")
        
        # Final verification
        print("\nüìä Final verification:")
        categories_count = session.query(StudyCategory).count()
        studies_count = session.query(StudyCatalog).count()
        normal_values_count = session.query(StudyNormalValue).count()
        templates_count = session.query(StudyTemplate).count()
        template_items_count = session.query(StudyTemplateItem).count()
        
        print(f"üìä Study Categories: {categories_count}")
        print(f"üìä Study Catalog: {studies_count}")
        print(f"üìä Normal Values: {normal_values_count}")
        print(f"üìä Study Templates: {templates_count}")
        print(f"üìä Template Items: {template_items_count}")
        
        print("\n‚úÖ Comprehensive laboratory studies catalog insertion completed!")
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        session.rollback()
        raise
    finally:
        session.close()

if __name__ == "__main__":
    insert_comprehensive_studies()
