================================================================================
PLAN DETALLADO DE DESPLIEGUE A PRODUCCIÓN
Sistema de Historias Clínicas Electrónicas
================================================================================

Fecha de Creación: 2025-10-22
Versión del Sistema: 3.0
Nivel de Compliance: 100% LFPDPPP
Criticidad: ALTA (Datos Médicos Sensibles)

================================================================================
TABLA DE CONTENIDOS
================================================================================

FASE 1: Preparación Pre-Producción (Estimado: 3-5 días)
FASE 2: Infraestructura y Dominio (Estimado: 2-3 días)
FASE 3: Seguridad y Encriptación (Estimado: 1-2 días)
FASE 4: Base de Datos Producción (Estimado: 1 día)
FASE 5: Configuración WhatsApp Business (Estimado: 1-2 días)
FASE 6: Deployment y Testing (Estimado: 2-3 días)
FASE 7: Monitoreo y Backups (Estimado: 1-2 días)
FASE 8: Documentación Legal (Estimado: 1-2 días)
FASE 9: Go-Live y Soporte (Estimado: 1 día)

TIEMPO TOTAL ESTIMADO: 13-21 días hábiles

================================================================================
FASE 1: PREPARACIÓN PRE-PRODUCCIÓN
================================================================================

1.1 CHECKLIST DE PRE-VUELO
---------------------------
□ Sistema funciona correctamente en desarrollo
□ Todas las funcionalidades han sido probadas
□ No hay errores críticos en logs
□ Base de datos tiene datos de prueba limpios
□ Documentación está actualizada
□ Se ha hecho backup del código actual

1.2 REVISIÓN DE CÓDIGO
-----------------------
□ Eliminar console.log innecesarios
□ Eliminar comentarios de debug
□ Verificar que no hay credenciales hardcodeadas
□ Revisar manejo de errores
□ Verificar validaciones de entrada
□ Code review por otro desarrollador (recomendado)

Comando:
```bash
# Buscar console.log en frontend
grep -r "console.log" frontend/src --exclude-dir=node_modules

# Buscar print en backend
grep -r "print(" backend --exclude-dir=__pycache__

# Buscar TODOs
grep -r "TODO\|FIXME" . --exclude-dir=node_modules --exclude-dir=__pycache__
```

1.3 TESTING COMPLETO
--------------------
□ Registro de nuevo médico
□ Login/Logout
□ Crear/Editar/Eliminar paciente
□ Crear/Editar consulta
□ Prescripciones (CRUD)
□ Estudios clínicos (subir PDF)
□ Signos vitales
□ Derechos ARCO (crear, actualizar)
□ Consentimiento WhatsApp (flujo completo)
□ Revocación de consentimiento
□ Página pública de aviso de privacidad
□ Generación de PDFs (receta, orden, constancia)
□ Horarios médicos
□ Citas

1.4 PREPARAR REPOSITORIO
------------------------
□ Crear branch "production"
□ Tag de versión (v3.0.0)
□ README actualizado con instrucciones de producción
□ .env.example actualizado

Comandos:
```bash
git checkout -b production
git tag -a v3.0.0 -m "Production release v3.0.0 - Full LFPDPPP compliance"
git push origin production
git push origin v3.0.0
```

================================================================================
FASE 2: INFRAESTRUCTURA Y DOMINIO
================================================================================

2.1 ELEGIR PROVEEDOR DE HOSTING
--------------------------------

OPCIÓN A: VPS (Recomendado para Control Total)
Proveedores sugeridos:
- DigitalOcean (desde $12/mes)
- Linode/Akamai (desde $12/mes)
- Vultr (desde $12/mes)
- AWS Lightsail (desde $10/mes)

Especificaciones mínimas:
- 2 CPU cores
- 4 GB RAM
- 80 GB SSD
- Ubuntu 22.04 LTS
- Ubicación: México (GDL o QRO) o US-West

OPCIÓN B: PaaS (Más Fácil, Menos Control)
- Railway.app
- Render.com
- Fly.io
- Heroku (más caro)

OPCIÓN C: Servidor Dedicado (Para Gran Escala)
- OVH
- Hetzner
- IBM Cloud

**RECOMENDACIÓN**: DigitalOcean Droplet 4GB RAM + Managed PostgreSQL

2.2 CONFIGURACIÓN INICIAL DEL SERVIDOR
---------------------------------------

Conectar al servidor:
```bash
ssh root@TU_IP_SERVIDOR
```

Actualizar sistema:
```bash
apt update && apt upgrade -y
apt install -y curl git vim ufw fail2ban
```

Crear usuario no-root:
```bash
adduser deploy
usermod -aG sudo deploy
su - deploy
```

Configurar firewall:
```bash
sudo ufw allow OpenSSH
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp
sudo ufw enable
```

Instalar Docker:
```bash
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
sudo usermod -aG docker $USER
```

Instalar Docker Compose:
```bash
sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
```

2.3 DOMINIO Y DNS
-----------------

□ Comprar dominio (GoDaddy, Namecheap, Cloudflare)
  Sugerencias:
  - tuconsultorio.com
  - clinica-[nombre].com
  - historias-[nombre].com

□ Configurar DNS (Cloudflare recomendado - GRATIS con SSL):
  
  Crear registros DNS:
  A     @                   -> IP_SERVIDOR
  A     www                 -> IP_SERVIDOR
  A     api                 -> IP_SERVIDOR
  A     privacy             -> IP_SERVIDOR (para página pública)
  CNAME whatsapp            -> @

Ejemplo en Cloudflare:
```
Type    Name        Content                 Proxy   TTL
A       @           134.209.100.123         ✓       Auto
A       www         134.209.100.123         ✓       Auto
A       api         134.209.100.123         ✓       Auto
```

2.4 CERTIFICADO SSL (HTTPS)
----------------------------

OPCIÓN A: Cloudflare (Más Fácil - RECOMENDADO)
- Proxy Orange Cloud activado
- SSL/TLS: Full (strict)
- Certificado Edge: Automático
- Certificado Origin: Generar en Cloudflare
- Always Use HTTPS: ON

OPCIÓN B: Let's Encrypt + Certbot
```bash
sudo apt install -y certbot python3-certbot-nginx
sudo certbot --nginx -d tudominio.com -d www.tudominio.com
```

OPCIÓN C: Certificado de Pago (No necesario)

================================================================================
FASE 3: SEGURIDAD Y ENCRIPTACIÓN
================================================================================

3.1 GENERAR CLAVES DE ENCRIPTACIÓN REALES
------------------------------------------

⚠️ CRÍTICO: Las claves actuales son de desarrollo!

Generar nueva clave de encriptación:
```python
# En tu computadora local
python3 -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
```

Guardar en lugar seguro (1Password, LastPass, o archivo encriptado)

3.2 GENERAR SECRET KEY JWT
---------------------------

```python
import secrets
print(secrets.token_urlsafe(32))
```

3.3 CONFIGURAR VARIABLES DE ENTORNO PRODUCCIÓN
-----------------------------------------------

Crear archivo: `/home/deploy/app/.env.production`

```bash
# ============================================================================
# PRODUCTION ENVIRONMENT VARIABLES
# ============================================================================

# Database
POSTGRES_USER=historias_prod_user
POSTGRES_PASSWORD=[GENERAR_PASSWORD_FUERTE_32_CHARS]
POSTGRES_DB=historias_clinicas_prod
DATABASE_URL=postgresql://historias_prod_user:[PASSWORD]@postgres-db:5432/historias_clinicas_prod

# Security
MEDICAL_ENCRYPTION_KEY=[CLAVE_GENERADA_EN_3.1]
JWT_SECRET_KEY=[CLAVE_GENERADA_EN_3.2]
JWT_ALGORITHM=HS256
JWT_EXPIRATION_HOURS=24

# CORS
ALLOWED_ORIGINS=https://tudominio.com,https://www.tudominio.com

# WhatsApp Business API (Meta)
META_WHATSAPP_PHONE_ID=[TU_PHONE_ID_PRODUCCION]
META_WHATSAPP_TOKEN=[TU_TOKEN_PRODUCCION]
META_WHATSAPP_BUSINESS_ID=[TU_BUSINESS_ID]
META_WHATSAPP_API_VERSION=v21.0
META_WHATSAPP_VERIFY_TOKEN=[GENERAR_TOKEN_UNICO]

# Environment
ENVIRONMENT=production
DEBUG=false
LOG_LEVEL=INFO

# URLs
FRONTEND_URL=https://tudominio.com
BACKEND_URL=https://api.tudominio.com
PUBLIC_PRIVACY_NOTICE_URL=https://tudominio.com/privacy-notice

# Session
SESSION_COOKIE_SECURE=true
SESSION_COOKIE_HTTPONLY=true
SESSION_COOKIE_SAMESITE=lax

# Rate Limiting
RATE_LIMIT_ENABLED=true
RATE_LIMIT_PER_MINUTE=100

# Email (Opcional - para notificaciones)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=tu_email@gmail.com
SMTP_PASSWORD=[APP_PASSWORD]
SMTP_FROM=noreply@tudominio.com
```

**IMPORTANTE**: ⚠️ NUNCA subir este archivo a Git!

3.4 ASEGURAR PERMISOS
---------------------

```bash
chmod 600 /home/deploy/app/.env.production
chown deploy:deploy /home/deploy/app/.env.production
```

3.5 CONFIGURAR FAIL2BAN (Protección contra ataques)
----------------------------------------------------

```bash
sudo apt install -y fail2ban
sudo systemctl enable fail2ban
sudo systemctl start fail2ban
```

Crear configuración para el backend:
```bash
sudo nano /etc/fail2ban/jail.local
```

Contenido:
```ini
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 5

[sshd]
enabled = true

[nginx-http-auth]
enabled = true
```

================================================================================
FASE 4: BASE DE DATOS PRODUCCIÓN
================================================================================

4.1 OPCIÓN A: PostgreSQL en Docker (Más Simple)
------------------------------------------------

Usar el docker-compose actual pero con volumes nombrados

4.2 OPCIÓN B: Managed Database (RECOMENDADO)
---------------------------------------------

DigitalOcean Managed PostgreSQL:
- 1 GB RAM: $15/mes
- 2 GB RAM: $30/mes
- Backups automáticos diarios
- Alta disponibilidad
- Actualizaciones automáticas

Configuración:
1. Crear cluster en DigitalOcean
2. Habilitar "Trusted Sources" (solo IP del servidor)
3. Usar SSL connection
4. Obtener connection string

4.3 MIGRACIONES Y DATOS INICIALES
----------------------------------

Conectar a la base de datos:
```bash
psql "postgresql://user:pass@host:port/db?sslmode=require"
```

Ejecutar migraciones en orden:
```sql
-- 1. Crear tablas base
\i backend/migrations/create_schedule_tables.sql

-- 2. Crear tablas de diagnóstico
\i backend/migrations/create_diagnosis_tables.sql

-- 3. Crear tablas de estudios
\i backend/migrations/create_study_catalog.sql

-- 4. Crear tablas de signos vitales
\i backend/migrations/create_consultation_vital_signs.sql

-- 5. Crear tablas de medicamentos
\i backend/migrations/create_medications_and_prescriptions.sql

-- 6. Crear tabla de auditoría
\i backend/migrations/create_audit_log.sql

-- 7. Crear sistema de privacidad
\i backend/migrations/create_privacy_system.sql

-- 8. Insertar datos de catálogo
\i backend/insert_countries_states.sql
\i backend/comprehensive_laboratory_studies_catalog.sql
```

Verificar:
```sql
\dt   -- Listar todas las tablas
SELECT COUNT(*) FROM medications;  -- Debe ser ~200
SELECT COUNT(*) FROM privacy_notices;  -- Debe ser 1
```

4.4 BACKUP INICIAL
------------------

```bash
# Crear backup
pg_dump "postgresql://user:pass@host:port/db" > backup_inicial.sql

# Comprimir
gzip backup_inicial.sql
```

Guardar en:
- Servidor local
- Cloud storage (AWS S3, Google Cloud Storage)
- Backup externo

================================================================================
FASE 5: CONFIGURACIÓN WHATSAPP BUSINESS API
================================================================================

5.1 CUENTA DE WHATSAPP BUSINESS
--------------------------------

Requisitos:
□ Meta Business Manager account
□ WhatsApp Business Account
□ Número de teléfono dedicado (NO puede ser personal)
□ Verificación de negocio (2-3 días)

Proceso:
1. Ir a: https://business.facebook.com/
2. Crear Business Manager
3. Agregar WhatsApp Business
4. Verificar número de teléfono
5. Solicitar acceso a API

5.2 CONFIGURAR WEBHOOKS EN PRODUCCIÓN
--------------------------------------

En Meta Developer Portal:

Webhook URL: https://api.tudominio.com/api/webhooks/whatsapp
Verify Token: [EL_TOKEN_QUE_PUSISTE_EN_.env.production]

Suscripciones:
☑ messages
☑ message_deliveries
☑ message_reads
☑ message_status

5.3 TEMPLATES DE MENSAJES
--------------------------

Crear template en Meta Business Manager:

Template Name: privacy_consent_notice
Category: UTILITY
Language: Spanish (es_MX)

Contenido:
```
AVISO DE PRIVACIDAD - {{1}}

Le informamos sobre nuestro aviso de privacidad conforme a la LFPDPPP.

Sus datos serán utilizados para:
• Atención médica
• Historia clínica
• Seguimiento de tratamiento

Puede consultar el aviso completo en: {{2}}

Si está de acuerdo con el tratamiento de sus datos, presione el botón "Acepto".
Si no está de acuerdo, puede no responder este mensaje.

Puede revocar su consentimiento en cualquier momento contactando a su médico.
```

Botón Interactivo:
- Text: "Acepto"
- Type: QUICK_REPLY

5.4 PROBAR WEBHOOKS
-------------------

Herramientas de testing:
- ngrok (desarrollo)
- Webhook.site (verificar formato)
- Postman (simular Meta requests)

Test checklist:
□ Envío de mensaje
□ Recepción de respuesta
□ Status updates (delivered, read)
□ Button click events
□ Error handling

================================================================================
FASE 6: DEPLOYMENT Y TESTING
================================================================================

6.1 CLONAR REPOSITORIO EN SERVIDOR
-----------------------------------

```bash
cd /home/deploy
git clone https://github.com/TU_USUARIO/medical-records.git app
cd app
git checkout production
```

6.2 CREAR DOCKER-COMPOSE PARA PRODUCCIÓN
-----------------------------------------

Crear: `docker-compose.prod.yml`

```yaml
version: '3.8'

services:
  python-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
    env_file:
      - .env.production
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      - postgres-db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  typescript-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    restart: always
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://api.tudominio.com
    depends_on:
      - python-backend

  postgres-db:
    image: postgres:15-alpine
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"  # Solo localhost
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - typescript-frontend
      - python-backend

volumes:
  postgres_prod_data:
  backend_uploads:
  nginx_logs:
```

6.3 CONFIGURAR NGINX
--------------------

Crear: `nginx/nginx.conf`

```nginx
events {
    worker_connections 1024;
}

http {
    # Configuración básica
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logs
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    
    # Compresión
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    
    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    
    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name tudominio.com www.tudominio.com;
        return 301 https://$server_name$request_uri;
    }
    
    # Frontend
    server {
        listen 443 ssl http2;
        server_name tudominio.com www.tudominio.com;
        
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        
        location / {
            proxy_pass http://typescript-frontend:80;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
    }
    
    # Backend API
    server {
        listen 443 ssl http2;
        server_name api.tudominio.com;
        
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        
        # Rate limiting para API
        location / {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://python-backend:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers
            add_header Access-Control-Allow-Origin "https://tudominio.com" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
            
            if ($request_method = OPTIONS) {
                return 204;
            }
        }
        
        # Rate limiting extra para login
        location /api/auth/login {
            limit_req zone=login burst=3 nodelay;
            proxy_pass http://python-backend:8000;
        }
        
        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options "nosniff" always;
    }
}
```

6.4 CONSTRUIR Y LEVANTAR SERVICIOS
-----------------------------------

```bash
# Cargar variables de entorno
source .env.production

# Construir imágenes
docker-compose -f docker-compose.prod.yml build --no-cache

# Levantar servicios
docker-compose -f docker-compose.prod.yml up -d

# Verificar logs
docker-compose -f docker-compose.prod.yml logs -f
```

6.5 VERIFICAR SERVICIOS
------------------------

```bash
# Ver status
docker-compose -f docker-compose.prod.yml ps

# Verificar backend
curl https://api.tudominio.com/health

# Verificar frontend
curl https://tudominio.com

# Verificar base de datos
docker-compose -f docker-compose.prod.yml exec postgres-db psql -U historias_prod_user -d historias_clinicas_prod -c "SELECT COUNT(*) FROM privacy_notices;"
```

6.6 TESTING EN PRODUCCIÓN
--------------------------

Checklist completo:
□ Login funciona
□ Registro de médico funciona
□ Crear paciente funciona
□ Crear consulta funciona
□ PDFs se generan correctamente
□ WhatsApp envía mensajes
□ Webhook recibe respuestas
□ ARCO requests funcionan
□ Página pública accesible sin login
□ SSL funciona (candado verde)
□ No hay errores en consola del navegador
□ Velocidad de carga < 3 segundos
□ Responsive en móvil

================================================================================
FASE 7: MONITOREO Y BACKUPS
================================================================================

7.1 CONFIGURAR BACKUPS AUTOMÁTICOS
-----------------------------------

Crear script: `/home/deploy/scripts/backup.sh`

```bash
#!/bin/bash

# Configuración
BACKUP_DIR="/home/deploy/backups"
DATE=$(date +%Y%m%d_%H%M%S)
DB_NAME="historias_clinicas_prod"
DB_USER="historias_prod_user"
RETENTION_DAYS=30

# Crear directorio si no existe
mkdir -p $BACKUP_DIR

# Backup de base de datos
docker-compose -f /home/deploy/app/docker-compose.prod.yml exec -T postgres-db \
  pg_dump -U $DB_USER $DB_NAME | gzip > $BACKUP_DIR/db_backup_$DATE.sql.gz

# Backup de archivos subidos
tar -czf $BACKUP_DIR/uploads_backup_$DATE.tar.gz /home/deploy/app/backend/uploads

# Eliminar backups antiguos
find $BACKUP_DIR -name "*.gz" -mtime +$RETENTION_DAYS -delete

# Log
echo "[$DATE] Backup completado" >> /var/log/medical-records-backup.log

# Opcional: Subir a cloud storage
# aws s3 cp $BACKUP_DIR/db_backup_$DATE.sql.gz s3://tu-bucket/backups/
```

Hacer ejecutable:
```bash
chmod +x /home/deploy/scripts/backup.sh
```

Configurar cron (diario a las 2 AM):
```bash
crontab -e
```

Agregar:
```
0 2 * * * /home/deploy/scripts/backup.sh
```

7.2 MONITOREO CON UPTIME ROBOT
-------------------------------

Servicio gratuito: https://uptimerobot.com

Crear monitores para:
□ https://tudominio.com (cada 5 min)
□ https://api.tudominio.com/health (cada 5 min)
□ PostgreSQL (port check)

Alertas:
- Email cuando el sitio esté down
- SMS (opcional, de pago)

7.3 LOGS CENTRALIZADOS
-----------------------

Instalar Loki + Grafana (opcional pero recomendado):

```bash
cd /home/deploy
git clone https://github.com/grafana/loki.git
cd loki
docker-compose up -d
```

O usar servicios externos:
- Papertrail (gratis hasta 50MB/mes)
- Loggly
- Datadog (más completo pero de pago)

7.4 MONITOREO DE PERFORMANCE
-----------------------------

Usar:
- Google Analytics (frontend)
- Sentry (errores en tiempo real)
- New Relic (APM completo)

Instalar Sentry:
```bash
pip install sentry-sdk
```

En backend/main_clean_english.py:
```python
import sentry_sdk
from sentry_sdk.integrations.fastapi import FastApiIntegration

sentry_sdk.init(
    dsn="TU_SENTRY_DSN",
    integrations=[FastApiIntegration()],
    environment="production",
    traces_sample_rate=0.1
)
```

================================================================================
FASE 8: DOCUMENTACIÓN LEGAL Y COMPLIANCE
================================================================================

8.1 ACTUALIZAR AVISO DE PRIVACIDAD
-----------------------------------

Conectar a la base de datos y actualizar:

```sql
UPDATE privacy_notices
SET 
  content = '[CONTENIDO_COMPLETO_REVISADO_POR_ABOGADO]',
  summary = '[RESUMEN_ACTUALIZADO]',
  updated_at = CURRENT_TIMESTAMP
WHERE is_active = true;
```

8.2 DOCUMENTOS LEGALES REQUERIDOS
----------------------------------

Crear carpeta: `/home/deploy/legal/`

Documentos necesarios:
□ Aviso de privacidad completo (firmado por abogado)
□ Términos y condiciones de uso
□ Política de cookies
□ Manual de seguridad de datos
□ Plan de respuesta a incidentes
□ Procedimiento ARCO
□ Contrato con pacientes (opcional)
□ NOM-004-SSA3-2012 compliance checklist

8.3 REGISTROS Y CERTIFICACIONES
--------------------------------

□ Registro ante INAI (opcional pero recomendado)
□ Certificación ISO 27001 (opcional, costoso)
□ Registro de base de datos personal (LFPDPPP Art. 20)

8.4 TRAINING DEL PERSONAL
--------------------------

Crear documentación para:
□ Manual de usuario para médicos
□ Procedimientos de seguridad
□ Qué hacer en caso de breach
□ Cómo responder solicitudes ARCO
□ Uso correcto de WhatsApp

================================================================================
FASE 9: GO-LIVE Y SOPORTE
================================================================================

9.1 CHECKLIST FINAL PRE-LANZAMIENTO
------------------------------------

SEGURIDAD:
□ SSL activo y funcionando
□ Firewall configurado
□ Rate limiting activo
□ Encriptación de datos activada
□ Claves de producción instaladas
□ Backups automáticos funcionando

FUNCIONALIDAD:
□ Todas las features probadas
□ PDFs se generan correctamente
□ WhatsApp envía mensajes
□ Emails funcionan (si aplica)
□ No hay errores en logs
□ Performance aceptable (< 3s load time)

LEGAL:
□ Aviso de privacidad actualizado
□ Documentación legal lista
□ Procedimientos ARCO documentados
□ Training completado

MONITOREO:
□ Uptime monitoring activo
□ Logs configurados
□ Alertas configuradas
□ Backups verificados

9.2 PLAN DE GO-LIVE
--------------------

DÍA -1: Preparación Final
- Backup completo de desarrollo
- Verificación final de producción
- Notificar a usuarios beta
- Preparar rollback plan

DÍA 0: Lanzamiento
09:00 - Verificación de servicios
10:00 - Abrir acceso a usuarios
11:00 - Monitorear logs
14:00 - Review de errores
17:00 - Status check
20:00 - Backup nocturno

DÍA +1: Post-Launch
- Revisar todos los logs
- Verificar métricas
- Corregir issues menores
- Recolectar feedback

9.3 PLAN DE ROLLBACK (SI ALGO SALE MAL)
----------------------------------------

```bash
# Detener servicios de producción
docker-compose -f docker-compose.prod.yml down

# Restaurar backup de base de datos
gunzip < /home/deploy/backups/db_backup_[FECHA].sql.gz | \
  psql "postgresql://user:pass@host:port/db"

# Volver a versión anterior
git checkout [TAG_ANTERIOR]
docker-compose -f docker-compose.prod.yml up -d

# Verificar
curl https://tudominio.com/health
```

9.4 SOPORTE POST-LANZAMIENTO
-----------------------------

Primeros 30 días:
□ Monitoreo diario de logs
□ Respuesta rápida a issues (< 4 horas)
□ Recolectar feedback de usuarios
□ Ajustes menores según necesidad
□ Verificar backups diarios
□ Review semanal de métricas

Canales de soporte:
- Email: soporte@tudominio.com
- WhatsApp Business
- Sistema de tickets (opcional)

================================================================================
COSTOS ESTIMADOS MENSUALES
================================================================================

INFRAESTRUCTURA:
- Servidor VPS (4GB RAM): $12-25/mes
- Managed PostgreSQL: $15-30/mes (opcional)
- Dominio: $10-15/año
- SSL: $0 (Let's Encrypt/Cloudflare)
- Cloudflare Pro (opcional): $20/mes
- Backups S3: $5-10/mes
SUBTOTAL: $42-90/mes

SERVICIOS:
- WhatsApp Business API: Gratis (Cloud API)
- Uptime Robot: Gratis
- Sentry: Gratis (hasta 5K eventos/mes)
- Email (SendGrid/Mailgun): $0-15/mes
SUBTOTAL: $0-15/mes

TOTAL MENSUAL: $42-105/mes
INVERSIÓN INICIAL: $0-200 (setup, dominio)

================================================================================
TIMELINE RESUMIDO
================================================================================

Semana 1:
- Días 1-2: Preparación y limpieza de código
- Días 3-4: Configurar infraestructura y dominio
- Día 5: Seguridad y variables de entorno

Semana 2:
- Días 1-2: Base de datos y migraciones
- Días 3-4: WhatsApp Business setup
- Día 5: Deployment inicial

Semana 3:
- Días 1-2: Testing completo
- Día 3: Monitoreo y backups
- Días 4-5: Documentación legal

Semana 4:
- Día 1: Testing final
- Día 2: Go-Live
- Días 3-5: Soporte post-lanzamiento

================================================================================
CONTACTOS ÚTILES
================================================================================

Soporte Técnico:
- DigitalOcean: https://www.digitalocean.com/support
- Cloudflare: https://support.cloudflare.com
- Meta Business: https://business.facebook.com/help

Compliance:
- INAI: https://home.inai.org.mx
- COFEPRIS: https://www.gob.mx/cofepris

Comunidad:
- Stack Overflow
- GitHub Discussions
- Reddit: r/webdev, r/docker

================================================================================
CHECKLIST FINAL ANTES DE GO-LIVE
================================================================================

□ Código en repositorio con tag de versión
□ Servidor configurado y seguro
□ Dominio apuntando correctamente
□ SSL activo (HTTPS)
□ Base de datos migrada y respaldada
□ Variables de entorno de producción configuradas
□ Encriptación real activada
□ WhatsApp Business configurado y probado
□ Webhooks funcionando
□ Nginx configurado con rate limiting
□ Backups automáticos programados
□ Monitoreo activo (Uptime Robot)
□ Logs centralizados
□ Aviso de privacidad actualizado
□ Documentación legal lista
□ Training completado
□ Testing completo realizado
□ Plan de rollback preparado
□ Equipo de soporte listo

================================================================================

🚀 ¡LISTO PARA PRODUCCIÓN!

Siguiendo este plan paso a paso, tendrás un sistema médico profesional,
seguro, y 100% compliant con la LFPDPPP funcionando en producción.

¿Dudas? Revisa la documentación o contacta soporte.

================================================================================

Última actualización: 2025-10-22
Versión del plan: 1.0
Criticidad: ALTA
Estado: READY FOR PRODUCTION 🎉

