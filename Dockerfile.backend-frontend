# Multi-stage build: Frontend + Backend
FROM node:22.13.1-slim AS frontend-builder

# Build React frontend
WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm ci --only=production

COPY frontend/ ./
RUN npm run build

# Production stage: Backend + Static Frontend
FROM python:3.11-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    nginx \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set up Python backend
WORKDIR /app
COPY backend/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

COPY backend/ ./

# Copy built frontend
COPY --from=frontend-builder /app/frontend/build /app/frontend/build

# Configure nginx
RUN echo 'server { \
    listen 80; \
    server_name localhost; \
    client_max_body_size 10M; \
    \
    # Serve React frontend \
    location / { \
        root /app/frontend/build; \
        index index.html; \
        try_files $uri $uri/ /index.html; \
    } \
    \
    # Proxy API requests to backend \
    location /api/ { \
        proxy_pass http://localhost:8000; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \
        proxy_set_header X-Forwarded-Proto $scheme; \
    } \
    \
    location /health { \
        proxy_pass http://localhost:8000; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
    } \
}' > /etc/nginx/sites-available/default

# Create startup script
RUN echo '#!/bin/bash' > /start.sh && \
    echo 'set -e' >> /start.sh && \
    echo '' >> /start.sh && \
    echo 'echo "🚀 Starting Medical Records System..."' >> /start.sh && \
    echo '' >> /start.sh && \
    echo '# Start FastAPI backend in background' >> /start.sh && \
    echo 'cd /app' >> /start.sh && \
    echo 'echo "📡 Starting FastAPI backend..."' >> /start.sh && \
    echo 'uvicorn main_clean_english:app --host 0.0.0.0 --port 8000 --workers 1 &' >> /start.sh && \
    echo '' >> /start.sh && \
    echo '# Wait a moment for backend to start' >> /start.sh && \
    echo 'sleep 3' >> /start.sh && \
    echo '' >> /start.sh && \
    echo '# Start nginx in foreground' >> /start.sh && \
    echo 'echo "🌐 Starting web server..."' >> /start.sh && \
    echo 'nginx -g "daemon off;"' >> /start.sh && \
    chmod +x /start.sh

EXPOSE 80

CMD ["/start.sh"]
